name: CI/CD Pipeline

on:
  push:
    branches:
      - main  # Change this to your deployment branch

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Node.js for FE
        uses: actions/setup-node@v3
        with:
          node-version: '18'  # Specify your Node.js version

      - name: Install FE dependencies
        working-directory: ./app/frontend  # Change to your front-end directory
        run: npm install --force

      - name: Build FE
        working-directory: ./app/frontend # Change to your front-end directory
        run: npm run build  # Change to your build command if different

      - name: Run FE tests
        working-directory: ./app/frontend  # Change to your front-end directory
        run: npm run test  # Change to your test command if different

      - name: Set up Node.js for BE
        uses: actions/setup-node@v3
        with:
          node-version: '18'  # Specify your Node.js version

      - name: Install BE dependencies
        working-directory: ./app/backend  # Change to your back-end directory
        run: npm install

      - name: Build BE
        working-directory: ./app/backend  # Change to your back-end directory
        run: npm run build  # Change to your build command if different

      - name: Run BE tests
        working-directory: ./app/backend  # Change to your back-end directory
        run: npm run test  # Change to your test command if different

  deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Deploy to Remote Host using Docker
        uses: appleboy/ssh-action@v0.1.2
        with:
          host: ${{ secrets.REMOTE_HOST }}
          username: ${{ secrets.REMOTE_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            cd /cmsweb-v2  # Change to your application directory on the remote host
            git pull origin main  # Pull latest changes (if using Git)
            docker compose -f .deploy/docker-compose.dev.yaml down
            docker compose -f .deploy/docker-compose.dev.yaml up -d --build
            docker system prune -f  # clean up after build docker compose