name: Deploy-prod

on:
  push:
    branches: ["main"]
    # tags:
    #   - "v*" # This triggers the workflow on any tag

jobs:
  deploy:
    runs-on: ubuntu-latest
    environment: production
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Get latest tag
        id: set_tag
        run: |
          # Fetch all tags
          git fetch --tags

          # Get the latest tag (e.g., "v1.2.3")
          LATEST_TAG=$(git describe --tags $(git rev-list --tags --max-count=1))

          # Export the LATEST_TAG variable for the next step
          echo "TAG=$LATEST_TAG" >> $GITHUB_ENV

      - name: Copy Environment Configuration
        env:
          ENV_PROD: ${{ secrets.ENV_PROD }}
          FE_ENV_PROD: ${{ secrets.FE_ENV_PROD }}
          TAG: ${{env.TAG}}
        run: |
          echo "$ENV_PROD" > .deploy/.env
          echo "$FE_ENV_PROD" > app/frontend/.env

          if grep -q '^TAG=' .deploy/.env; then
            sed -i "s|^TAG=.*|TAG=$TAG|" .deploy/.env
          else
            echo "TAG=$TAG" >> .deploy/.env
          fi

          if grep -q '^VITE_TAG=' app/frontend/.env; then
            sed -i "s|^VITE_TAG=.*|VITE_TAG=$TAG|" app/frontend/.env
          else
            echo "VITE_TAG=$TAG" >> app/frontend/.env
          fi

      - name: Deploy with Docker Compose
        env:
          REMOTE_HOST_PROD: ${{ secrets.REMOTE_HOST_PROD }}
          REMOTE_USER_PROD: ${{ secrets.REMOTE_USER_PROD }}
          SSH_PORT_PROD: ${{ secrets.SSH_PORT_PROD }}
          SSH_PRIVATE_KEY_PROD: ${{ secrets.SSH_PRIVATE_KEY_PROD }}
        run: |
          mkdir -p ~/.ssh
          echo "$SSH_PRIVATE_KEY_PROD" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh-keyscan -p $SSH_PORT_PROD $REMOTE_HOST_PROD >> ~/.ssh/known_hosts
          export DOCKER_HOST="ssh://$REMOTE_USER_PROD@$REMOTE_HOST_PROD:$SSH_PORT_PROD"

          cat .deploy/.env
          cat app/frontend/.env

          docker ps -a
          # docker compose -f .deploy/docker-compose.dev.yaml down
          # docker compose -f .deploy/docker-compose.dev.yaml up -d --build
          # docker image prune -f  # clean up none image after built
